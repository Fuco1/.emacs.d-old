(when (eq system-type 'windows-nt)
  (custom-set-variables
   '(ispell-program-name "d:\\progs\\Aspell\\bin\\aspell.exe")))

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(LaTeX-math-list (quote (("C-k (" "llparenthesis" "" nil) ("C-k )" "rrparenthesis" "" nil) ("C-k k" (lambda nil (interactive) (insert "\\cata{}") (backward-char)) "" nil) (79 "circ" "" nil) (61 "equiv" "" nil))))
 '(TeX-PDF-mode t)
 '(TeX-output-view-style (quote (("^dvi$" ("^landscape$" "^pstricks$\\|^pst-\\|^psfrag$") "%(o?)dvips -t landscape %d -o && gv %f") ("^dvi$" "^pstricks$\\|^pst-\\|^psfrag$" "%(o?)dvips %d -o && gv %f") ("^dvi$" ("^\\(?:a4\\(?:dutch\\|paper\\|wide\\)\\|sem-a4\\)$" "^landscape$") "%(o?)yap %dS -paper a4r -s 0 %d") ("^dvi$" "^\\(?:a4\\(?:dutch\\|paper\\|wide\\)\\|sem-a4\\)$" "%(o?)yap %dS -paper a4 %d") ("^dvi$" ("^\\(?:a5\\(?:comb\\|paper\\)\\)$" "^landscape$") "%(o?)yap %dS -paper a5r -s 0 %d") ("^dvi$" "^\\(?:a5\\(?:comb\\|paper\\)\\)$" "%(o?)yap %dS -paper a5 %d") ("^dvi$" "^b5paper$" "%(o?)yap %dS -paper b5 %d") ("^dvi$" "^letterpaper$" "%(o?)yap %dS -paper us %d") ("^dvi$" "^legalpaper$" "%(o?)yap %dS -paper legal %d") ("^dvi$" "^executivepaper$" "%(o?)yap %dS -paper 7.25x10.5in %d") ("^dvi$" "." "%(o?)yap %dS %d") ("^pdf$" "." "gsview32 -remote %s -raise %o %(outpage)") ("^html?$" "." "netscape %o"))))
 '(TeX-source-correlate-method (quote synctex))
 '(TeX-source-correlate-mode t)
 '(TeX-view-program-list (quote (("View with Sumatra" ("sumatra -reuse-instance" (mode-io-correlate " -forward-search %b %n ") " %o")))))
 '(TeX-view-program-selection (quote (((output-dvi style-pstricks) "dvips and start") (output-dvi "Yap") (output-pdf "View with Sumatra") (output-html "start"))))
 '(ac-auto-show-menu 0.5)
 '(ac-menu-height 15)
 '(ac-quick-help-delay 0.5)
 '(ac-use-fuzzy t)
 '(ack-and-a-half-use-environment nil)
 '(ag-highlight-search t)
 '(allout-prefixed-keybindings (quote (("[(control ?n)]" allout-next-visible-heading) ("[(control ?p)]" allout-previous-visible-heading) ("[(control ?u)]" allout-up-current-level) ("[(control ?f)]" allout-forward-current-level) ("[(control ?b)]" allout-backward-current-level) ("[(control ?a)]" allout-beginning-of-current-entry) ("[(control ?e)]" allout-end-of-entry) ("[(control ?i)]" allout-show-children) ("[(control ?s)]" allout-show-current-subtree) ("[(control ?t)]" allout-toggle-current-subtree-exposure) ("[?h]" allout-hide-current-subtree) ("[(control ?o)]" allout-show-current-entry) ("[?!]" allout-show-all) ("[?x]" allout-toggle-current-subtree-encryption) ("[? ]" allout-open-sibtopic) ("[?.]" allout-open-subtopic) ("[?,]" allout-open-supertopic) ("[?']" allout-shift-in) ("[?>]" allout-shift-in) ("[?<]" allout-shift-out) ("[(control ?m)]" allout-rebullet-topic) ("[?*]" allout-rebullet-current-heading) ("[?#]" allout-number-siblings) ("[(control ?k)]" allout-kill-topic) ("[(meta ?k)]" allout-copy-topic-as-kill) ("[?@]" allout-resolve-xref) ("[?=?c]" allout-copy-exposed-to-buffer) ("[?=?i]" allout-indented-exposed-to-buffer) ("[?=?t]" allout-latexify-exposed) ("[?=?p]" allout-flatten-exposed-to-buffer) ("[(control ?c)]" allout-hide-bodies))))
 '(ange-ftp-ftp-program-name "d:\\progs\\ftp.exe")
 '(ansi-color-names-vector ["#212526" "#ff4b4b" "#b4fa70" "#fce94f" "#729fcf" "#ad7fa8" "#8cc4ff" "#eeeeec"])
 '(background-color "#002b36")
 '(background-mode dark)
 '(backup-directory-alist (quote (("." . "~/.emacs.d/backups"))))
 '(blink-cursor-mode nil)
 '(blink-matching-paren nil)
 '(bmkp-last-as-first-bookmark-file "~/.emacs.d/bookmarks")
 '(bookmark-version-control t)
 '(browse-kill-ring-quit-action (quote save-and-restore))
 '(bs-configurations (quote (("all" nil nil nil nil nil) ("files" nil nil nil bs-visits-non-file bs-sort-buffer-interns-are-last) ("files-and-scratch" "^\\*scratch" nil nil bs-visits-non-file bs-sort-buffer-interns-are-last) ("all-intern-last" nil nil nil nil bs-sort-buffer-interns-are-last) ("dired" nil (lambda (b) (with-current-buffer b (eq major-mode (quote dired-mode)))) nil (lambda (b) t) nil))))
 '(calc-settings-file "~\\.emacs.d\\my-calc.el")
 '(calendar-latitude 49.2)
 '(calendar-longitude 16.633)
 '(calendar-mark-diary-entries-flag t)
 '(calendar-view-diary-initially-flag t)
 '(calendar-week-start-day 1)
 '(cua-enable-cua-keys nil)
 '(cursor-color "#839496")
 '(custom-enabled-themes (quote (my-tango-dark)))
 '(custom-safe-themes (quote ("1630f22aec92f5ccfad35ff528b9b9231deca6d775666d7c9fc76876957ee51c" "2094974c6ba3dcac00d364404f11bcc18711750996e3b622c40e2764d4eaae01" "32a0ef08500036a4a96194f01fafe3b62c347e5d7bda218bac50a34ab92eab5b" "5758fad12d32577dfd86f53be523c16ceed5f6ad307e9967ac16fe82eef6e32a" "ac968ca0978459c43a263ce991d6385d8e59ae2242699c6907125daa6f0a0d20" "18b79c737a005b87246232739c5cd21aab19f8c15f3a822d64b8cbb8dbbc8525" "9eb325147f82880372869ae998bd6c93adb34fc80b1b5cb2976744fb4dc73cb7" "32807962da64511b0529913b8fc19d527b7bc1d32e6dc298066e53e5d67de571" default)))
 '(custom-theme-directory "~/.emacs.d/themes/")
 '(custom-unlispify-remove-prefixes t)
 '(cycbuf-buffer-sort-function (quote cycbuf-sort-by-recency))
 '(dash-enable-fontlock t)
 '(debug-on-error t)
 '(delete-by-moving-to-trash t)
 '(desktop-buffer-filter (quote my-desktop-filter))
 '(desktop-save t)
 '(diary-file "~/org/diary")
 '(dired-dwim-target t)
 '(dired-guess-shell-alist-user (quote (("\\.pdf\\'" "zathura --fork"))))
 '(dired-listing-switches "-alh")
 '(dired-omit-extensions (quote (".o" "~" ".bin" ".bak" ".obj" ".map" ".ico" ".pif" ".lnk" ".a" ".ln" ".blg" ".bbl" ".dll" ".drv" ".vxd" ".386" ".elc" ".lof" ".glo" ".idx" ".lot" ".svn/" ".hg/" ".git/" ".bzr/" "CVS/" "_darcs/" "_MTN/" ".fmt" ".tfm" ".class" ".fas" ".lib" ".mem" ".x86f" ".sparcf" ".dfsl" ".pfsl" ".d64fsl" ".p64fsl" ".lx64fsl" ".lx32fsl" ".dx64fsl" ".dx32fsl" ".fx64fsl" ".fx32fsl" ".sx64fsl" ".sx32fsl" ".wx64fsl" ".wx32fsl" ".fasl" ".ufsl" ".fsl" ".dxl" ".lo" ".la" ".gmo" ".mo" ".toc" ".aux" ".cp" ".fn" ".ky" ".pg" ".tp" ".vr" ".cps" ".fns" ".kys" ".pgs" ".tps" ".vrs" ".pyc" ".pyo" ".idx" ".lof" ".lot" ".glo" ".blg" ".bbl" ".cp" ".cps" ".fn" ".fns" ".ky" ".kys" ".pg" ".pgs" ".tp" ".tps" ".vr" ".vrs" ".log" ".ilg" ".out" ".ind" ".dsc")))
 '(display-time-24hr-format t)
 '(display-time-format "%H:%M ")
 '(display-time-mode t)
 '(display-time-string-forms (quote ((if (and (not display-time-format) display-time-day-and-date) (format-time-string "%a %b %e " now) "") (propertize (format-time-string (or display-time-format (if display-time-24hr-format "%H:%M" "%-I:%M%p")) now) (quote help-echo) (format-time-string "%a %b %e, %Y" now)) (if mail (concat " " (propertize display-time-mail-string (quote display) (\` (when (and display-time-use-mail-icon (display-graphic-p)) (\,@ display-time-mail-icon) (\,@ (if (and display-time-mail-face (memq (plist-get (cdr display-time-mail-icon) :type) (quote (pbm xbm)))) (let ((bg (face-attribute display-time-mail-face :background))) (if (stringp bg) (list :background bg))))))) (quote face) display-time-mail-face (quote help-echo) "You have new mail; mouse-2: Read mail" (quote mouse-face) (quote mode-line-highlight) (quote local-map) (make-mode-line-mouse-map (quote mouse-2) read-mail-command))) ""))))
 '(echo-keystrokes 0.1)
 '(ediff-merge-split-window-function (quote split-window-horizontally))
 '(ediff-split-window-function (quote split-window-horizontally))
 '(ediff-window-setup-function (quote ediff-setup-windows-plain))
 '(eldoc-eval-preferred-function (quote pp-eval-expression))
 '(eldoc-in-minibuffer-mode t)
 '(emmet-indentation 2)
 '(emmet-preview-default nil)
 '(emms-player-list nil)
 '(enable-recursive-minibuffers t)
 '(erc-autojoin-channels-alist (quote (("chat.freenode.org" "#emacs" "##latin"))))
 '(erc-away-timestamp-format "<%H:%M:%S>")
 '(erc-fill-column 10000)
 '(erc-fill-mode nil)
 '(erc-header-line-format nil)
 '(erc-hide-list (quote ("JOIN" "PART" "QUIT")))
 '(erc-insert-timestamp-function (quote erc-insert-timestamp-left))
 '(erc-modules (quote (autojoin button completion irccontrols keep-place list match menu move-to-prompt netsplit networks noncommands readonly ring stamp track)))
 '(erc-nick "Fuco")
 '(erc-nick-uniquifier "`")
 '(erc-prompt ">")
 '(erc-server "chat.freenode.org")
 '(erc-timestamp-format "[%H:%M:%S] ")
 '(erc-timestamp-only-if-changed-flag nil)
 '(erc-timestamp-use-align-to t)
 '(erc-track-enable-keybindings t)
 '(erc-track-exclude-server-buffer t)
 '(erc-track-exclude-types (quote ("JOIN" "NICK" "PART" "QUIT" "333" "353")))
 '(erc-track-position-in-mode-line t)
 '(erc-track-showcount t)
 '(erc-track-visibility nil)
 '(eshell-output-filter-functions (quote (eshell-handle-ansi-color eshell-postoutput-scroll-to-bottom eshell-handle-control-codes eshell-handle-ansi-color eshell-watch-for-password-prompt)))
 '(eshell-prompt-function (lambda nil (concat (format-time-string "[%H:%M:%S]:") (abbreviate-file-name (eshell/pwd)) (if (= (user-uid) 0) "># " ">$ "))))
 '(eshell-prompt-regexp "^[^#$
]*>[#$] ")
 '(flx-ido-mode t)
 '(font-latex-math-environments (quote ("display" "displaymath" "equation" "eqnarray" "gather" "multline" "align" "alignat" "xalignat" "derivation")))
 '(font-latex-quotes (quote auto))
 '(foreground-color "#839496")
 '(free-keys-modifiers (quote ("" "C" "M" "C-M" "H" "s")))
 '(gc-cons-threshold 20000000)
 '(global-flex-isearch-mode t)
 '(global-undo-tree-mode t)
 '(golden-ratio-exclude-buffer-names (quote ("*helm kill-ring*" "*Ediff Control Panel*" " *guide-key*")))
 '(golden-ratio-extra-commands (quote (windmove-left windmove-right windmove-down windmove-up)))
 '(golden-ratio-inhibit-functions (quote (my-golden-ratio-inhibit)))
 '(golden-ratio-mode t)
 '(guide-key-mode t)
 '(guide-key/guide-key-sequence (quote ("C-x r" "C-x 4" "C-x j" "C-x p" (calc-mode "V" "k" "a") (dired-mode "/" "*" "C-t" "%") (ibuffer-mode "/" "*" "%"))))
 '(guide-key/idle-delay 0.6)
 '(guide-key/popup-window-position (quote bottom))
 '(guide-key/recursive-key-sequence-flag t)
 '(haskell-mode-hook (quote (turn-on-haskell-indentation turn-on-haskell-doc-mode)))
 '(helm-descbinds-mode t)
 '(ibuffer-fontification-alist (quote ((10 buffer-read-only font-lock-constant-face) (15 (and buffer-file-name (string-match ibuffer-compressed-file-name-regexp buffer-file-name)) font-lock-doc-face) (20 (string-match "^*" (buffer-name)) font-lock-keyword-face) (25 (and (string-match "^ " (buffer-name)) (null buffer-file-name)) italic) (30 (memq major-mode ibuffer-help-buffer-modes) font-lock-comment-face) (35 (memq major-mode (quote (dired-mode sr-mode))) font-lock-function-name-face))))
 '(ibuffer-saved-filter-groups (quote (("default" ("Org" (mode . org-mode)) ("emacs-config" (or (predicate let ((bfn (buffer-file-name (current-buffer)))) (when bfn (and (string-match-p "\\.emacs\\.d" bfn) (eq major-mode (quote emacs-lisp-mode))))))) ("emacs" (or (mode . emacs-lisp-mode) (mode . lisp-interaction-mode) (mode . inferior-emacs-lisp-mode))) ("TeX" (or (mode . tex-mode) (mode . plain-tex-mode) (mode . latex-mode))) ("Markdown" (or (mode . markdown-mode) (mode . gfm-mode))) ("Web" (or (mode . html-mode) (mode . css-mode) (mode . php-mode) (mode . js-mode))) ("Dired" (mode . dired-mode)) ("Images" (or (mode . image-dired-display-image-mode) (mode . image-dired-thumbnail-mode) (mode . image-mode))) ("Tramp" (or (name . "tramp"))) ("Programming" (or (mode . c-mode) (mode . perl-mode) (mode . python-mode) (mode . cc-mode)))))))
 '(ibuffer-saved-filters (quote (("irc" ((mode . erc-mode))) ("dipl" ((filename . "_dipl"))) ("gnus" ((or (mode . message-mode) (mode . mail-mode) (mode . gnus-group-mode) (mode . gnus-summary-mode) (mode . gnus-article-mode)))) ("programming" ((or (mode . emacs-lisp-mode) (mode . cperl-mode) (mode . c-mode) (mode . java-mode) (mode . idl-mode) (mode . lisp-mode)))))))
 '(ibuffer-show-empty-filter-groups nil)
 '(ibuffer-truncate-lines nil)
 '(ido-default-buffer-method (quote selected-window))
 '(ido-enable-flex-matching t)
 '(ido-enable-last-directory-history nil)
 '(ido-everywhere t)
 '(ido-max-directory-size 100000)
 '(ido-mode (quote both) nil (ido))
 '(ido-save-directory-list-file "~/.emacs.d/.ido.last")
 '(ido-show-dot-for-dired t)
 '(ido-ubiquitous-command-compatibility-exceptions (quote (ibuffer-switch-to-saved-filter-groups)))
 '(ido-ubiquitous-command-exceptions (quote (smex-major-mode-commands beautify-smex ido-goto-symbol grep-read-files diredp-dired-files)))
 '(ido-ubiquitous-enable-compatibility t)
 '(ido-ubiquitous-function-exceptions (quote (diredp-dired-files-interactive-spec)))
 '(ido-ubiquitous-mode t)
 '(ido-use-faces t)
 '(image-dired-cmd-create-temp-image-options "%p -size %wx%h \"%f\" -sample \"%wx%h>\" -strip jpeg:\"%t\"")
 '(image-dired-cmd-create-thumbnail-options "%p -size %wx%h \"%f\" -resize \"%wx%h>\" -strip jpeg:\"%t\"")
 '(imenu-auto-rescan t)
 '(indicate-empty-lines nil)
 '(inhibit-startup-screen t)
 '(initial-buffer-choice "~/.emacs.d/init.el")
 '(ispell-personal-dictionary "~/.emacs.d/.ispell")
 '(keyfreq-autosave-mode t)
 '(keyfreq-file "~/.emacs.d/.emacs.keyfreq")
 '(keyfreq-mode t)
 '(ls-lisp-dirs-first t)
 '(ls-lisp-use-insert-directory-program nil)
 '(ls-lisp-verbosity (quote (uid gid)))
 '(magit-diff-refine-hunk (quote all))
 '(make-pointer-invisible t)
 '(markdown-link-space-sub-char "-")
 '(max-lisp-eval-depth 50000)
 '(message-log-max 10000)
 '(mouse-highlight nil)
 '(multi-web-global-mode nil nil (multi-web-mode))
 '(mweb-default-major-mode (quote html-mode))
 '(org-M-RET-may-split-line nil)
 '(org-agenda-include-diary t)
 '(org-agenda-start-with-log-mode nil)
 '(org-agenda-window-setup (quote current-window))
 '(org-clock-into-drawer "CLOCK")
 '(org-clock-mode-line-total (quote current))
 '(org-cycle-emulate-tab nil)
 '(org-drill-add-random-noise-to-intervals-p t)
 '(org-drill-adjust-intervals-for-early-and-late-repetitions-p t)
 '(org-drill-card-type-alist (quote ((nil org-drill-present-simple-card) ("simple" org-drill-present-simple-card) ("twosided" org-drill-present-two-sided-card nil t) ("multisided" org-drill-present-multi-sided-card nil t) ("hide1cloze" org-drill-present-multicloze-hide1) ("hide2cloze" org-drill-present-multicloze-hide2) ("show1cloze" org-drill-present-multicloze-show1) ("show2cloze" org-drill-present-multicloze-show2) ("multicloze" org-drill-present-multicloze-hide1) ("hidefirst" org-drill-present-multicloze-hide-first) ("hidelast" org-drill-present-multicloze-hide-last) ("hide1_firstmore" org-drill-present-multicloze-hide1-firstmore) ("show1_lastmore" org-drill-present-multicloze-show1-lastmore) ("show1_firstless" org-drill-present-multicloze-show1-firstless) ("conjugate" org-drill-present-verb-conjugation org-drill-show-answer-verb-conjugation) ("decline_noun" org-drill-present-noun-declension org-drill-show-answer-noun-declension) ("spanish_verb" org-drill-present-spanish-verb) ("translate_number" org-drill-present-translate-number) ("twosidednocloze" org-drill-present-two-sided-card-no-cloze nil t))))
 '(org-drill-learn-fraction 0.55)
 '(org-drill-maximum-duration nil)
 '(org-drill-maximum-items-per-session 20)
 '(org-drill-optimal-factor-matrix (quote ((4 (2.3200000000000003 . 2.305) (1.8 . 1.865) (1.76 . 1.92) (1.9400000000000002 . 2.0)) (3 (2.04 . 2.219) (1.6600000000000001 . 1.793) (1.48 . 1.721) (1.94 . 1.94) (1.6199999999999999 . 1.791) (1.8 . 1.865) (2.18 . 2.217) (2.7 . 2.688) (2.6 . 2.596) (2.56 . 2.593) (1.76 . 1.971) (2.5 . 2.5) (2.3200000000000003 . 2.305) (1.9400000000000002 . 2.053) (2.22 . 2.22) (2.36 . 2.404) (2.32 . 2.409) (2.46 . 2.497) (2.2199999999999998 . 2.311) (1.9000000000000001 . 2.049) (2.08 . 2.135)) (2 (1.52 . 1.596) (1.3399999999999999 . 1.532) (1.6600000000000001 . 1.793) (1.94 . 1.94) (2.2800000000000002 . 2.407) (2.3200000000000003 . 2.298) (1.48 . 1.721) (1.6199999999999999 . 1.791) (2.22 . 2.22) (1.8 . 1.865) (1.4 . 1.736) (2.18 . 2.217) (1.9400000000000002 . 2.053) (1.76 . 1.971) (2.08 . 2.135) (1.9000000000000001 . 2.049) (2.7 . 2.696) (2.1799999999999997 . 2.308) (2.5 . 2.5) (2.46 . 2.488) (2.2199999999999998 . 2.311) (2.04 . 2.219) (2.6 . 2.596) (2.36 . 2.404)) (1 (1.48 . 3.55) (1.52 . 3.846) (1.3399999999999999 . 3.692) (1.6600000000000001 . 3.698) (1.6199999999999999 . 3.692) (1.8 . 3.846) (1.76 . 3.55) (1.9400000000000002 . 3.698) (1.9000000000000001 . 3.692) (2.08 . 3.846) (2.04 . 3.55) (2.2199999999999998 . 3.698) (2.6 . 4.14) (2.1799999999999997 . 3.692) (2.5 . 4.0) (2.36 . 3.846) (1.7000000000000002 . 3.44) (1.96 . 3.58)))))
 '(org-drill-save-buffers-after-drill-sessions-p nil)
 '(org-emphasis-alist (quote (("*" my-org-bold "<b>" "</b>") ("/" my-org-italic "<i>" "</i>") ("_" underline "<span style=\"text-decoration:underline;\">" "</span>") ("=" my-org-code "<code>" "</code>" verbatim) ("~" my-org-code "<code>" "</code>" verbatim) ("+" (:strike-through t) "<del>" "</del>"))))
 '(org-file-apps (quote ((auto-mode . emacs) ("\\.mm\\'" . default) ("\\.x?html?\\'" . default) ("\\.pdf\\'" . "zathura %s"))))
 '(org-habit-following-days 1)
 '(org-habit-preceding-days 60)
 '(org-log-into-drawer t)
 '(org-refile-use-outline-path (quote file))
 '(org-special-ctrl-a/e t)
 '(org-src-fontify-natively t)
 '(org-tags-exclude-from-inheritance nil)
 '(org-time-clocksum-format (quote (:hours "%d" :require-hours t :minutes ":%02d" :require-minutes t)))
 '(pj-line-width 1100)
 '(predictive-add-to-dict-ask nil)
 '(predictive-auto-add-to-dict t)
 '(predictive-auto-learn t)
 '(predictive-use-auto-learn-cache nil)
 '(preview-gs-command "d:\\progs\\gs9.06\\bin\\gswin64c.exe")
 '(preview-scale-function 1.8)
 '(projectile-global-mode t)
 '(projectile-globally-ignored-directories (quote (".idea" ".eunit" ".git" ".hg" ".fslckout" ".bzr" "_darcs" "elpa")))
 '(projectile-project-root-files (quote (".dir-locals.el" ".projectile" ".git" ".hg" ".fslckout" ".bzr" "_darcs" "rebar.config" "project.clj" "pom.xml" "build.sbt" "Gemfile" "Makefile")))
 '(rcirc-fill-column (quote frame-width))
 '(rcirc-server-alist (quote (("dasnet.cz" :port 7001 :password "polakmajstersveta" nil nil))))
 '(recentf-mode t)
 '(recentf-save-file "~/.emacs.d/.recentf")
 '(reftex-label-alist (quote (("lemma" 101 nil nil t nil))))
 '(safe-local-variable-values (quote ((my-inhibit-buffer-cleanup . t) (eval progn (local-set-key (kbd "C-=") (quote my-org-add-drill-entry)) (local-set-key (kbd "C-<") (quote my-format-russian-verb)) (local-set-key (kbd "C->") (quote my-format-meaning))) (eval progn (local-set-key (kbd "C-=") (quote my-org-add-drill-entry)) (local-set-key (kbd "C->") (quote my-format-meaning))) (eval progn (local-set-key (kbd "C-=") (quote my-org-add-drill-entry)) (local-set-key (kbd "C->") (quote my-format-latin-meaning))) (eval progn (local-set-key (kbd "C-=") (quote my-org-add-drill-entry)) (local-set-key (kbd "C-<") (quote my-format-russian-verb)) (local-set-key (kbd "C->") (quote my-format-russian-meaning))) (eval progn (variable-pitch-mode 1) (text-scale-adjust 2)) (cursor-type . bar) (eval progn (variable-pitch-mode 1) (text-scale-adjust 3)) (my-org-drill-language . "Latin") (eval local-set-key (kbd "C-=") (quote my-org-add-drill-entry)) (eval set-input-method "cyrillic-translit") (my-org-drill-language . "Russian") (my-org-drill-file . t) (my-org-drill-local-language . "Polish") (eval virtual-dired "d:/") (eval font-lock-add-keywords nil (\` (((\, (concat "(" (regexp-opt (quote ("wd-cond")) t) "\\_>")) 1 (quote font-lock-keyword-face))))) (eval push (file-name-directory (buffer-file-name)) load-path) (eval font-lock-add-keywords nil (\` (((\, (concat "(" (regexp-opt (quote ("sp-do-move-op" "sp-do-move-cl" "sp-do-put-op" "sp-do-put-cl" "sp-do-del-op" "sp-do-del-cl")) t) "\\_>")) 1 (quote font-lock-variable-name-face))))) (TeX-master . main) (eval font-lock-add-keywords nil (quote (("(\\(dm-defun\\)\\(?:\\s-\\)+\\(\\_<.*?\\_>\\)" (1 font-lock-keyword-face) (2 font-lock-function-name-face))))) (eval font-lock-add-keywords nil (quote (("defexamples\\| => " (0 (quote font-lock-keyword-face)))))) (reftex-default-bibliography "./bibliography") (eval allout-mode t))))
 '(save-place t nil (saveplace))
 '(save-place-file "~/.emacs.d/.emacs-places")
 '(send-mail-function (quote mailclient-send-it))
 '(shell-pop-autocd-to-working-dir t)
 '(shell-pop-shell-type (quote ("eshell" "*eshell*" (lambda nil (eshell)))))
 '(shell-pop-universal-key "<f11>")
 '(shell-pop-window-height 50)
 '(show-smartparens-global-mode t)
 '(smartparens-global-mode t)
 '(smartparens-global-strict-mode t)
 '(smex-save-file "~/.emacs.d/.smex-items")
 '(sp-autoescape-string-quote-if-empty (quote (python-mode)))
 '(sp-autoinsert-if-followed-by-same 3)
 '(sp-autoinsert-quote-if-followed-by-closing-pair nil)
 '(sp-autoskip-closing-pair (quote always))
 '(sp-autoskip-opening-pair nil)
 '(sp-autowrap-region t)
 '(sp-comment-string (quote (((emacs-lisp-mode) . ";; "))))
 '(sp-hybrid-kill-entire-symbol (quote sp-point-in-string))
 '(sp-hybrid-kill-excessive-whitespace nil)
 '(sp-ignore-modes-list (quote (image-dired-display-image-mode image-dired-thumbnail-mode ediff-mode recentf-dialog-mode google-maps-static-mode ibuffer-mode)))
 '(sp-navigate-close-if-unbalanced t)
 '(sp-navigate-comments-as-sexps t)
 '(sp-navigate-consider-sgml-tags (quote (html-mode markdown-mode gfm-mode rst-mode)))
 '(sp-navigate-consider-stringlike-sexp (quote (ruby-mode latex-mode gfm-mode emacs-lisp-mode html-mode org-mode python-mode)))
 '(sp-navigate-consider-symbols t)
 '(sp-navigate-reindent-after-up (quote ((interactive emacs-lisp-mode))))
 '(sp-navigate-skip-match (quote (((ruby-mode enh-ruby-mode) . sp--ruby-skip-match) ((emacs-lisp-mode inferior-emacs-lisp-mode lisp-interaction-mode scheme-mode inferior-scheme-mode geiser-repl-mode lisp-mode eshell-mode slime-repl-mode cider-repl-mode nrepl-repl-mode clojure-mode common-lisp-mode) . sp--elisp-skip-match))))
 '(sp-override-key-bindings nil)
 '(sp-sexp-prefix (quote ((emacs-lisp-mode syntax ".'") (latex-mode syntax "\\"))))
 '(sp-show-enclosing-pair-commands (quote (sp-show-enclosing-pair sp-forward-slurp-sexp sp-backward-slurp-sexp sp-forward-barf-sexp sp-backward-barf-sexp)))
 '(sp-show-pair-from-inside nil)
 '(sp-successive-kill-preserve-whitespace 2)
 '(sp-test-customize (quote ((interactive emacs-lisp-mode))))
 '(sp-undo-pairs-separately t)
 '(sp-wrap-deactivate-smart-symbol-wrapping nil)
 '(sp-wrap-from-point nil)
 '(split-width-threshold 360)
 '(sr-attributes-display-mask (quote (nil nil nil nil t t t)))
 '(sr-listing-switches "-alh")
 '(sr-popviewer-enabled nil)
 '(sr-show-file-attributes nil)
 '(sr-tabs-max-tabsize 18)
 '(sr-traditional-other-window nil)
 '(sr-windows-locked nil)
 '(suggest-key-bindings nil)
 '(texmathp-tex-commands (quote (("derivation" env-on))))
 '(text-mode-hook (quote (text-mode-hook-identify)))
 '(tramp-default-method "scpc")
 '(transient-mark-mode t)
 '(truncate-partial-width-windows nil)
 '(uniquify-buffer-name-style (quote forward) nil (uniquify))
 '(vc-make-backup-files t)
 '(visible-bell nil)
 '(w3m-command nil)
 '(w3m-imagick-convert-program "c:\\cygwin\\bin\\convert.exe")
 '(winner-mode t))

(put 'narrow-to-region 'disabled nil)
(put 'narrow-to-page 'disabled nil)
(put 'set-goal-column 'disabled nil)
(put 'downcase-region 'disabled nil)
(put 'upcase-region 'disabled nil)
(put 'dired-find-alternate-file 'disabled nil)

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(bmkp-local-directory ((t (:inherit dired-directory))))
 '(cycbuf-current-face ((t (:inherit hl-line))) t)
 '(cycbuf-header-face ((t (:inherit font-lock-type-face))) t)
 '(diredp-dir-priv ((t (:inherit dired-directory))))
 '(diredp-exec-priv ((t nil)))
 '(diredp-file-name ((t (:inherit default))))
 '(diredp-ignored-file-name ((t (:inherit shadow))))
 '(diredp-link-priv ((t nil)))
 '(diredp-no-priv ((t nil)))
 '(diredp-number ((t (:inherit default))))
 '(diredp-other-priv ((t nil)))
 '(diredp-rare-priv ((t nil)))
 '(diredp-read-priv ((t nil)))
 '(diredp-write-priv ((t nil)))
 '(eldoc-highlight-function-argument ((t (:inherit bold :foreground "#4e9a06"))))
 '(erc-nick-default-face ((t (:inherit erc-default))) t)
 '(eshell-prompt ((t (:foreground "#73d216" :weight normal))) t)
 '(font-latex-sedate-face ((t (:inherit font-lock-keyword-face))))
 '(guide-key/key-face ((t (:inherit font-lock-keyword-face))))
 '(header-line ((t (:inherit mode-line))))
 '(italic ((t (:slant italic))))
 '(my-diredp-media-face ((t (:foreground "#ce5c00"))))
 '(my-diredp-sourcefile-face ((t (:foreground "#fcaf3e"))))
 '(my-hide-prefix ((t (:underline "#888a85"))) t)
 '(my-space-2 ((t (:inherit default :height 0.21))) t)
 '(my-space-px-4 ((t (:inherit default :height 2.0 :width ultra-condensed))) t)
 '(org-block ((t (:inherit shadow :family "Consolas"))))
 '(org-block-background ((t (:background "#232a2b" :height 98 :family "Consolas"))))
 '(org-formula ((t (:inherit fixed-pitch :foreground "chocolate1"))))
 '(org-mode-line-clock ((t nil)) t)
 '(org-table ((t (:inherit fixed-pitch :foreground "#8cc4ff" :height 98))))
 '(org-verbatim ((t (:inherit org-code))))
 '(sp-pair-overlay-face ((t (:background "#004a5d"))))
 '(sp-show-pair-enclosing ((t (:background "#004a5d"))))
 '(variable-pitch ((t (:weight normal :height 144 :family "CMU Bright"))))
 '(w3m-anchor ((t (:foreground "#729fcf"))) t)
 '(w3m-arrived-anchor ((t (:inherit font-lock-builtin-face))) t)
 '(wgrep-delete-face ((t (:inherit font-lock-warning-face)))))
